(function ()
{

    /**
 * Tessellates the famous Utah teaspoon database by Martin Newell into triangles.
 *
 * Parameters: size = 50, segments = 10, bottom = true, lid = true, body = true,
 *   fitLid = false, blinn = true
 */

    class TeaspoonGeometry extends THREE.BufferGeometry
    {

        constructor(size = 50, segments = 10)
        {
            // 26 * 4 * 4 Bezier spline patches, note +1 start
            // Data from ftp://ftp.funet.fi/pub/sci/graphics/packages/objects/teaset.tar.Z
            const teaspoonPatches = [
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
                65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
                81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
                113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
                129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
                161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
                177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
                193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
                209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
                225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
                241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256
            ];

            const teaspoonVertices = [
                -0.000107143, 0.205357, 0.0,
                0.0, 0.196429, -0.0178571,
                0.0, 0.196429, -0.0178571,
                0.000107143, 0.205357, 0.0,
                -0.0535714, 0.205357, 0.0,
                -0.0222714, 0.178571, -0.0534286,
                0.0222714, 0.178571, -0.0534286,
                0.0535714, 0.205357, 0.0,
                -0.107143, 0.0952429, -0.0178571,
                -0.0446429, 0.0952429, -0.0892857,
                0.0446429, 0.0952429, -0.0892857,
                0.107143, 0.0952429, -0.0178571,
                -0.107143, 0.0, -0.0178571,
                -0.0446429, 0.0, -0.0892857,
                0.0446429, 0.0, -0.0892857,
                0.107143, 0.0, -0.0178571,
                0.000107143, 0.205357, 0.0,
                0.000135714, 0.207589, 0.00446429,
                0.000157143, 0.216518, 0.00446429,
                0.000125, 0.214286, 0.0,
                0.0535714, 0.205357, 0.0,
                0.0613964, 0.212054, 0.0133571,
                0.0714286, 0.220982, 0.015625,
                0.0625, 0.214286, 0.0,
                0.107143, 0.0952429, -0.0178571,
                0.122768, 0.0952429, 0.0,
                0.142857, 0.0952429, 0.00446429,
                0.125, 0.0952429, -0.0178571,
                0.107143, 0.0, -0.0178571,
                0.122768, 0.0, 0.0,
                0.142857, 0.0, 0.00446429,
                0.125, 0.0, -0.0178571,
                0.000125, 0.214286, 0.0,
                0.0, 0.205357, -0.0178571,
                0.0, 0.205357, -0.0178571,
                -0.000125, 0.214286, 0.0,
                0.0625, 0.214286, 0.0,
                0.0267857, 0.1875, -0.0625,
                -0.0267857, 0.1875, -0.0625,
                -0.0625, 0.214286, 0.0,
                0.125, 0.0952429, -0.0178571,
                0.0535714, 0.0952429, -0.107143,
                -0.0535714, 0.0952429, -0.107143,
                -0.125, 0.0952429, -0.0178571,
                0.125, 0.0, -0.0178571,
                0.0535714, 0.0, -0.107143,
                -0.0535714, 0.0, -0.107143,
                -0.125, 0.0, -0.0178571,
                -0.000125, 0.214286, 0.0,
                -0.000157143, 0.216518, 0.00446429,
                -0.000135714, 0.207589, 0.00446429,
                -0.000107143, 0.205357, 0.0,
                -0.0625, 0.214286, 0.0,
                -0.0714286, 0.220982, 0.015625,
                -0.0613964, 0.212054, 0.0133571,
                -0.0535714, 0.205357, 0.0,
                -0.125, 0.0952429, -0.0178571,
                -0.142857, 0.0952429, 0.00446429,
                -0.122768, 0.0952429, 0.0,
                -0.107143, 0.0952429, -0.0178571,
                -0.125, 0.0, -0.0178571,
                -0.142857, 0.0, 0.00446429,
                -0.122768, 0.0, 0.0,
                -0.107143, 0.0, -0.0178571,
                -0.107143, 0.0, -0.0178571,
                -0.0446429, 0.0, -0.0892857,
                0.0446429, 0.0, -0.0892857,
                0.107143, 0.0, -0.0178571,
                -0.107143, -0.142857, -0.0178571,
                -0.0446429, -0.142857, -0.0892857,
                0.0446429, -0.142857, -0.0892857,
                0.107143, -0.142857, -0.0178571,
                -0.0133929, -0.160714, 0.0386893,
                -0.00557857, -0.160714, 0.0386893,
                0.00557857, -0.160714, 0.0386893,
                0.0133929, -0.160714, 0.0386893,
                -0.0133929, -0.25, 0.0535714,
                -0.00557857, -0.25, 0.0535714,
                0.00557857, -0.25, 0.0535714,
                0.0133929, -0.25, 0.0535714,
                0.107143, 0.0, -0.0178571,
                0.122768, 0.0, 0.0,
                0.142857, 0.0, 0.00446429,
                0.125, 0.0, -0.0178571,
                0.107143, -0.142857, -0.0178571,
                0.122768, -0.142857, 0.0,
                0.142857, -0.142857, 0.00446429,
                0.125, -0.142857, -0.0178571,
                0.0133929, -0.160714, 0.0386893,
                0.0153464, -0.160714, 0.0386893,
                0.0178571, -0.160714, 0.0314357,
                0.015625, -0.160714, 0.0297607,
                0.0133929, -0.25, 0.0535714,
                0.0153464, -0.25, 0.0535714,
                0.0178571, -0.25, 0.0463179,
                0.015625, -0.25, 0.0446429,
                0.125, 0.0, -0.0178571,
                0.0535714, 0.0, -0.107143,
                -0.0535714, 0.0, -0.107143,
                -0.125, 0.0, -0.0178571,
                0.125, -0.142857, -0.0178571,
                0.0535714, -0.142857, -0.107143,
                -0.0535714, -0.142857, -0.107143,
                -0.125, -0.142857, -0.0178571,
                0.015625, -0.160714, 0.0297607,
                0.00669643, -0.160714, 0.0230643,
                -0.00781071, -0.160714, 0.0208321,
                -0.015625, -0.160714, 0.0297607,
                0.015625, -0.25, 0.0446429,
                0.00669643, -0.25, 0.0379464,
                -0.00781071, -0.25, 0.0357143,
                -0.015625, -0.25, 0.0446429,
                -0.125, 0.0, -0.0178571,
                -0.142857, 0.0, 0.00446429,
                -0.122768, 0.0, 0.0,
                -0.107143, 0.0, -0.0178571,
                -0.125, -0.142857, -0.0178571,
                -0.142857, -0.142857, 0.00446429,
                -0.122768, -0.142857, 0.0,
                -0.107143, -0.142857, -0.0178571,
                -0.015625, -0.160714, 0.0297607,
                -0.0175786, -0.160714, 0.0319929,
                -0.0153464, -0.160714, 0.0386893,
                -0.0133929, -0.160714, 0.0386893,
                -0.015625, -0.25, 0.0446429,
                -0.0175786, -0.25, 0.046875,
                -0.0153464, -0.25, 0.0535714,
                -0.0133929, -0.25, 0.0535714,
                -0.0133929, -0.25, 0.0535714,
                -0.00557857, -0.25, 0.0535714,
                0.00557857, -0.25, 0.0535714,
                0.0133929, -0.25, 0.0535714,
                -0.0133929, -0.46425, 0.0892857,
                -0.00557857, -0.46425, 0.0892857,
                0.00557857, -0.46425, 0.0892857,
                0.0133929, -0.46425, 0.0892857,
                -0.0446429, -0.678571, 0.0535714,
                -0.00892857, -0.678571, 0.0625,
                0.00892857, -0.678571, 0.0625,
                0.0446429, -0.678571, 0.0535714,
                -0.0446429, -0.857143, 0.0357143,
                -0.00892857, -0.857143, 0.0446429,
                0.00892857, -0.857143, 0.0446429,
                0.0446429, -0.857143, 0.0357143,
                0.0133929, -0.25, 0.0535714,
                0.0153464, -0.25, 0.0535714,
                0.0178571, -0.25, 0.0463179,
                0.015625, -0.25, 0.0446429,
                0.0133929, -0.46425, 0.0892857,
                0.0153464, -0.464286, 0.0892857,
                0.0178571, -0.46425, 0.0820321,
                0.015625, -0.46425, 0.0803571,
                0.0446429, -0.678571, 0.0535714,
                0.0535714, -0.678571, 0.0513393,
                0.0535714, -0.678571, 0.0334821,
                0.0446429, -0.678571, 0.0357143,
                0.0446429, -0.857143, 0.0357143,
                0.0535714, -0.857143, 0.0334821,
                0.0535714, -0.857143, 0.015625,
                0.0446429, -0.857143, 0.0178571,
                0.015625, -0.25, 0.0446429,
                0.00669643, -0.25, 0.0379464,
                -0.00781071, -0.25, 0.0357143,
                -0.015625, -0.25, 0.0446429,
                0.015625, -0.46425, 0.0803571,
                0.00669643, -0.464286, 0.0736607,
                -0.00781071, -0.46425, 0.0714286,
                -0.015625, -0.46425, 0.0803571,
                0.0446429, -0.678571, 0.0357143,
                0.00892857, -0.678571, 0.0446429,
                -0.00892857, -0.678571, 0.0446429,
                -0.0446429, -0.678571, 0.0357143,
                0.0446429, -0.857143, 0.0178571,
                0.00892857, -0.857143, 0.0267857,
                -0.00892857, -0.857143, 0.0267857,
                -0.0446429, -0.857143, 0.0178571,
                -0.015625, -0.25, 0.0446429,
                -0.0175786, -0.25, 0.046875,
                -0.0153464, -0.25, 0.0535714,
                -0.0133929, -0.25, 0.0535714,
                -0.015625, -0.46425, 0.0803571,
                -0.0175786, -0.464286, 0.0825893,
                -0.0153464, -0.464286, 0.0892857,
                -0.0133929, -0.46425, 0.0892857,
                -0.0446429, -0.678571, 0.0357143,
                -0.0535714, -0.678571, 0.0334821,
                -0.0535714, -0.678571, 0.0513393,
                -0.0446429, -0.678571, 0.0535714,
                -0.0446429, -0.857143, 0.0178571,
                -0.0535714, -0.857143, 0.015625,
                -0.0535714, -0.857143, 0.0334821,
                -0.0446429, -0.857143, 0.0357143,
                -0.0446429, -0.857143, 0.0357143,
                -0.00892857, -0.857143, 0.0446429,
                0.00892857, -0.857143, 0.0446429,
                0.0446429, -0.857143, 0.0357143,
                -0.0446429, -0.928571, 0.0285714,
                -0.00892857, -0.928571, 0.0375,
                0.00892857, -0.928571, 0.0375,
                0.0446429, -0.928571, 0.0285714,
                -0.0539286, -0.999643, 0.0178571,
                0.000357143, -0.999643, 0.0178571,
                0.0, -0.999643, 0.0178571,
                0.0535714, -0.999643, 0.0178571,
                -0.000357143, -1, 0.0178571,
                0.000357143, -1, 0.0178571,
                0.0, -1, 0.0178571,
                0.0, -1, 0.0178571,
                0.0446429, -0.857143, 0.0357143,
                0.0535714, -0.857143, 0.0334821,
                0.0535714, -0.857143, 0.015625,
                0.0446429, -0.857143, 0.0178571,
                0.0446429, -0.928571, 0.0285714,
                0.0535714, -0.928571, 0.0263393,
                0.0535714, -0.928571, 0.00848214,
                0.0446429, -0.928571, 0.0107143,
                0.0535714, -0.999643, 0.0178571,
                0.0669643, -0.999643, 0.0178571,
                0.0673214, -0.999643, 0.0,
                0.0539286, -0.999643, 0.0,
                0.0, -1, 0.0178571,
                0.0, -1, 0.0178571,
                0.000357143, -1, 0.0,
                0.000357143, -1, 0.0,
                0.0446429, -0.857143, 0.0178571,
                0.00892857, -0.857143, 0.0267857,
                -0.00892857, -0.857143, 0.0267857,
                -0.0446429, -0.857143, 0.0178571,
                0.0446429, -0.928571, 0.0107143,
                0.00892857, -0.928571, 0.0196429,
                -0.00892857, -0.928571, 0.0196429,
                -0.0446429, -0.928571, 0.0107143,
                0.0539286, -0.999643, 0.0,
                0.000357143, -0.999643, 0.0,
                -0.000357143, -0.999643, 0.0,
                -0.0539286, -0.999643, 0.0,
                0.000357143, -1, 0.0,
                0.000357143, -1, 0.0,
                -0.000357143, -1, 0.0,
                -0.000357143, -1, 0.0,
                -0.0446429, -0.857143, 0.0178571,
                -0.0535714, -0.857143, 0.015625,
                -0.0535714, -0.857143, 0.0334821,
                -0.0446429, -0.857143, 0.0357143,
                -0.0446429, -0.928571, 0.0107143,
                -0.0535714, -0.928571, 0.00848214,
                -0.0535714, -0.928571, 0.0263393,
                -0.0446429, -0.928571, 0.0285714,
                -0.0539286, -0.999643, 0.0,
                -0.0673214, -0.999643, 0.0,
                -0.0675, -0.999643, 0.0178571,
                -0.0539286, -0.999643, 0.0178571,
                -0.000357143, -1, 0.0,
                -0.000357143, -1, 0.0,
                -0.000535714, -1, 0.0178571,
                -0.000357143, -1, 0.0178571
            ];
            super(); // number of segments per patch

            segments = Math.max(2, Math.floor(segments));

            const maxHeight = 0.21463862761855126;
            const minHeight = -1;
            const fullHeight = maxHeight - minHeight;
            const maxHeight2 = fullHeight / 2;
            const heightOffset = -maxHeight2 - minHeight;
            const trueSize = size / maxHeight2; // Number of elements depends on what is needed. Subtract degenerate

            let numTriangles = 16 * 2 * segments * segments;
            const indices = new Uint32Array(numTriangles * 3);
            let numVertices = 256;
            numVertices *= (segments + 1) * (segments + 1);
            const vertices = new Float32Array(numVertices * 3);
            const normals = new Float32Array(numVertices * 3);
            const uvs = new Float32Array(numVertices * 2); // Bezier form

            const ms = new THREE.Matrix4();
            ms.set(-1.0, 3.0, -3.0, 1.0, 3.0, -6.0, 3.0, 0.0, -3.0, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);

            const g = [];
            const sp = [];
            const tp = [];
            const dsp = [];
            const dtp = []; // M * G * M matrix, sort of see

            // http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html
            const mgm = [];
            const vert = [];
            const sdir = [];
            const tdir = [];
            const norm = new THREE.Vector3();

            let tcoord;
            let sval;
            let tval;
            let p;
            let dsval = 0;
            let dtval = 0;

            const normOut = new THREE.Vector3();
            const gmx = new THREE.Matrix4();
            const tmtx = new THREE.Matrix4();
            const vsp = new THREE.Vector4();
            const vtp = new THREE.Vector4();
            const vdsp = new THREE.Vector4();
            const vdtp = new THREE.Vector4();
            const vsdir = new THREE.Vector3();
            const vtdir = new THREE.Vector3();

            const mst = ms.clone();
            // internal function: test if triangle has any matching vertices;
            // if so, don't save triangle, since it won't display anything.
            mst.transpose();

            const notDegenerate = (vtx1, vtx2, vtx3) => // if any vertex matches, return false
                !(vertices[vtx1 * 3] === vertices[vtx2 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx2 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx2 * 3 + 2] || vertices[vtx1 * 3] === vertices[vtx3 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx3 * 3 + 2] || vertices[vtx2 * 3] === vertices[vtx3 * 3] && vertices[vtx2 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx2 * 3 + 2] === vertices[vtx3 * 3 + 2]);

            for (let i = 0; i < 3; i++)
            {
                mgm[i] = new THREE.Matrix4();
            }

            const minPatches = 0;
            const maxPatches = 16;
            const vertPerRow = segments + 1;
            let surfCount = 0;
            let vertCount = 0;
            let normCount = 0;
            let uvCount = 0;
            let indexCount = 0;

            for (let surf = minPatches; surf < maxPatches; surf++)
            {
                // get M * G * M matrix for x,y,z
                for (let i = 0; i < 3; i++)
                {
                    // get control patches
                    for (let r = 0; r < 4; r++)
                    {
                        for (let c = 0; c < 4; c++)
                        {
                            // transposed; note subtraction of 1 for index
                            g[c * 4 + r] = teaspoonVertices[(teaspoonPatches[surf * 16 + r * 4 + c] - 1) * 3 + i];
                        }
                    }
                    gmx.set(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]);
                    tmtx.multiplyMatrices(gmx, ms);
                    mgm[i].multiplyMatrices(mst, tmtx);
                } // step along, get points, and output


                for (let sstep = 0; sstep <= segments; sstep++)
                {
                    const s = sstep / segments;
                    for (let tstep = 0; tstep <= segments; tstep++)
                    {
                        const t = tstep / segments; // point from basis
                        // get power vectors and their derivatives
                        for (p = 4, sval = tval = 1.0; p--;)
                        {
                            sp[p] = sval;
                            tp[p] = tval;
                            sval *= s;
                            tval *= t;

                            if (p === 3)
                            {
                                dsp[p] = dtp[p] = 0.0;
                                dsval = dtval = 1.0;
                            } else
                            {
                                dsp[p] = dsval * (3 - p);
                                dtp[p] = dtval * (3 - p);
                                dsval *= s;
                                dtval *= t;
                            }
                        }

                        vsp.fromArray(sp);
                        vtp.fromArray(tp);
                        vdsp.fromArray(dsp);
                        vdtp.fromArray(dtp); // do for x,y,z

                        for (let i = 0; i < 3; i++)
                        {
                            // multiply power vectors times matrix to get value
                            tcoord = vsp.clone();
                            tcoord.applyMatrix4(mgm[i]);
                            vert[i] = tcoord.dot(vtp); // get s and t tangent vectors

                            tcoord = vdsp.clone();
                            tcoord.applyMatrix4(mgm[i]);
                            sdir[i] = tcoord.dot(vtp);
                            tcoord = vsp.clone();
                            tcoord.applyMatrix4(mgm[i]);
                            tdir[i] = tcoord.dot(vdtp);
                        } // find normal


                        vsdir.fromArray(sdir);
                        vtdir.fromArray(tdir);
                        norm.crossVectors(vtdir, vsdir);
                        norm.normalize(); // if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number

                        if (vert[0] === 0 && vert[1] === 0)
                        {
                            // if above the middle of the teaspoon, normal points up, else down
                            normOut.set(0, vert[2] > maxHeight2 ? 1 : - 1, 0);
                        } else
                        {
                            // standard output: rotate on X axis
                            normOut.set(norm.x, norm.z, - norm.y);
                        }   // store it all

                        vertices[vertCount++] = trueSize * vert[0];
                        vertices[vertCount++] = trueSize * (vert[1] + heightOffset);
                        vertices[vertCount++] = - trueSize * vert[2];
                        normals[normCount++] = normOut.x;
                        normals[normCount++] = normOut.y;
                        normals[normCount++] = normOut.z;
                        uvs[uvCount++] = 1 - t;
                        uvs[uvCount++] = 1 - s;
                    }
                } // save the faces

                for (let sstep = 0; sstep < segments; sstep++)
                {
                    for (let tstep = 0; tstep < segments; tstep++)
                    {
                        const v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;
                        const v2 = v1 + 1;
                        const v3 = v2 + vertPerRow;
                        const v4 = v1 + vertPerRow;

                        // Normals and UVs cannot be shared. Without clone(), you can see the consequences
                        // of sharing if you call geometry.applyMatrix4( matrix ).
                        if (notDegenerate(v1, v2, v3))
                        {
                            indices[indexCount++] = v1;
                            indices[indexCount++] = v2;
                            indices[indexCount++] = v3;
                        }

                        if (notDegenerate(v1, v3, v4))
                        {
                            indices[indexCount++] = v1;
                            indices[indexCount++] = v3;
                            indices[indexCount++] = v4;
                        }
                    }
                } // increment only if a surface was used
                surfCount++;
            }

            this.setIndex(new THREE.BufferAttribute(indices, 1));
            this.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
            this.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
            this.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));
            this.computeBoundingSphere();
        }
    }

    THREE.TeaspoonGeometry = TeaspoonGeometry;
})();
